/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kinglozzer.silverstripe.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Silverstripe.flex</tt>
 */
final class _SilverstripeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SS_LOOKUP = 2;
  public static final int SS_LOOKUP_STEP = 4;
  public static final int SS_LOOKUP_ARGUMENTS = 6;
  public static final int SS_BLOCK_START = 8;
  public static final int SS_BLOCK_STATEMENT = 10;
  public static final int SS_BAD_BLOCK_STATEMENT = 12;
  public static final int SS_IF_STATEMENT = 14;
  public static final int SS_INCLUDE_STATEMENT = 16;
  public static final int SS_TRANSLATION_STATEMENT = 18;
  public static final int SS_CACHED_STATEMENT = 20;
  public static final int SS_REQUIRE_STATEMENT = 22;
  public static final int SS_REQUIRE_CONTENT = 24;
  public static final int SS_INCLUDE_VARS = 26;
  public static final int SS_NAMED_VAR = 28;
  public static final int SS_COMMENT = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\51\1\1\22\0\1\2\1\25\1\31\1\0\1\4\1\7\1\27\1\32\1\61\1\45"+
    "\2\0\1\52\1\44\1\47\1\42\12\3\2\0\1\6\1\24\1\10\2\0\2\5\1\56\1\63\5\5\1\60"+
    "\10\5\1\57\1\62\6\5\1\0\1\46\2\0\1\23\1\0\1\35\1\36\1\40\1\41\1\21\1\20\1"+
    "\37\1\17\1\15\1\53\1\5\1\11\1\55\1\26\1\12\1\13\1\43\1\33\1\22\1\16\1\34\1"+
    "\54\1\14\3\5\1\50\1\30\1\64\7\0\1\51\242\0\2\51\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\3\4\5\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\12\1\14\1\5\4\15"+
    "\2\5\1\16\1\17\1\20\14\21\1\22\1\12\2\22"+
    "\1\0\1\23\1\5\1\15\2\5\1\24\2\5\1\25"+
    "\4\5\1\26\1\27\3\5\1\30\1\5\1\1\3\0"+
    "\1\31\2\32\1\33\3\15\1\0\1\27\1\0\1\34"+
    "\1\35\2\0\1\36\12\0\1\37\1\40\2\0\1\23"+
    "\1\15\1\41\3\0\1\42\2\0\1\43\6\0\1\1"+
    "\1\32\3\15\1\44\13\0\1\40\3\22\1\0\1\22"+
    "\1\37\1\23\1\45\1\0\1\46\4\0\1\1\1\32"+
    "\1\47\1\50\1\51\1\0\1\52\4\0\1\53\1\37"+
    "\4\0\1\47\1\54\1\32\11\0\1\37\2\0\1\32"+
    "\4\0\1\55\3\0\1\56\2\0\1\32\1\57\1\60"+
    "\3\0\1\61\4\0\1\32\1\0\1\62\3\0\1\63"+
    "\1\0\1\64\3\0\1\65\5\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0459\0\u0459\0\u0459\0\u0459\0\u0562\0\u0597"+
    "\0\u04c3\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u073f\0\u0459\0\u0459\0\u0459\0\u0459\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0bcd\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0459\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0459"+
    "\0\u0ddf\0\u0e14\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u0e49\0\u0e7e"+
    "\0\u0459\0\u0eb3\0\u0ee8\0\u0f1d\0\u070a\0\u0459\0\u073f\0\u0f52"+
    "\0\u0459\0\u0f87\0\u0fbc\0\u0459\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u0459\0\u12d7\0\u0459\0\u130c\0\u0d40\0\u0bcd"+
    "\0\u1341\0\u0c37\0\u1376\0\u0bcd\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u0459"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u0459\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u1238\0\u190d\0\u0636\0\u1376\0\u1942\0\u0459\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u0636\0\u0459\0\u0459\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u0459\0\u18a3\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u0459\0\u0459\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1c28"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u0459"+
    "\0\u204c\0\u2081\0\u20b6\0\u0459\0\u20eb\0\u2120\0\u2155\0\u0459"+
    "\0\u0459\0\u218a\0\u21bf\0\u21f4\0\u0459\0\u2229\0\u225e\0\u2293"+
    "\0\u22c8\0\u22fd\0\u2332\0\u0459\0\u2367\0\u239c\0\u23d1\0\u0e49"+
    "\0\u2406\0\u0459\0\u243b\0\u2470\0\u24a5\0\u0459\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u0459";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\21\1\22\1\21\1\23\37\21\1\24\1\21\1\25"+
    "\14\21\1\26\1\27\1\30\1\26\1\31\2\26\1\32"+
    "\37\26\1\33\1\34\1\0\7\26\1\35\2\26\1\36"+
    "\1\26\1\37\1\30\2\26\1\40\3\26\13\40\2\26"+
    "\1\40\4\26\7\40\1\26\1\40\5\26\1\0\1\26"+
    "\6\40\1\26\2\40\2\26\1\27\1\41\1\42\1\43"+
    "\1\44\3\26\5\44\1\45\1\44\1\46\3\44\2\26"+
    "\1\47\2\26\1\50\1\51\7\44\1\26\1\44\1\26"+
    "\1\52\1\26\1\53\1\26\1\0\1\54\6\44\1\26"+
    "\2\44\1\26\1\55\1\56\1\41\3\55\1\57\1\60"+
    "\1\55\1\61\2\55\1\62\1\63\3\55\1\64\11\55"+
    "\1\65\2\55\1\66\1\55\1\67\3\55\1\70\4\55"+
    "\1\0\13\55\1\26\1\27\1\41\1\26\1\43\1\44"+
    "\1\26\1\32\1\26\13\44\2\26\1\44\4\26\7\44"+
    "\1\26\1\44\5\26\1\0\1\26\6\44\1\26\2\44"+
    "\1\26\1\71\1\72\4\71\1\73\1\74\41\71\1\75"+
    "\13\71\1\26\1\27\1\41\1\42\1\43\1\44\1\76"+
    "\1\32\1\76\13\44\1\76\1\77\1\100\1\101\1\102"+
    "\1\50\1\51\7\44\1\26\1\44\5\26\1\0\1\26"+
    "\6\44\1\26\2\44\2\26\1\27\1\41\2\26\1\103"+
    "\1\26\1\32\1\26\13\103\2\26\1\103\4\26\12\103"+
    "\1\26\1\103\2\26\1\0\1\26\6\103\1\26\2\103"+
    "\2\26\1\27\1\41\2\26\1\104\1\26\1\32\1\26"+
    "\4\104\1\105\1\106\5\104\2\26\1\104\2\26\1\50"+
    "\1\51\7\104\1\26\1\104\2\26\1\107\2\26\1\0"+
    "\1\26\6\104\1\26\2\104\2\26\1\27\1\41\1\26"+
    "\1\43\1\44\1\26\1\32\1\26\13\44\2\26\1\44"+
    "\2\26\1\50\1\51\7\44\1\26\1\44\5\26\1\0"+
    "\1\54\6\44\1\26\2\44\2\26\1\27\1\41\13\26"+
    "\1\110\21\26\1\111\10\26\1\0\1\26\1\112\5\26"+
    "\1\113\3\26\31\114\1\50\1\51\12\114\1\52\17\114"+
    "\1\26\1\27\1\41\2\26\1\115\3\26\13\115\2\26"+
    "\1\115\4\26\7\115\1\26\1\115\5\26\1\0\1\54"+
    "\6\115\1\26\2\115\2\26\1\27\1\30\1\42\1\43"+
    "\11\26\1\116\1\26\1\117\3\26\1\120\1\26\1\121"+
    "\2\26\1\50\1\51\16\26\1\0\13\26\44\20\1\122"+
    "\20\20\4\21\1\22\1\21\1\123\37\21\1\124\1\21"+
    "\1\125\21\21\1\0\3\21\13\0\2\21\1\0\4\21"+
    "\7\0\1\21\1\0\7\21\6\0\1\21\2\0\10\21"+
    "\1\126\56\21\1\0\47\21\1\0\17\21\1\22\60\21"+
    "\66\0\1\27\65\0\1\41\67\0\1\127\3\0\13\127"+
    "\2\0\1\127\4\0\7\127\1\0\1\127\7\0\6\127"+
    "\1\0\1\130\1\127\11\0\1\131\55\0\1\37\66\0"+
    "\1\40\1\0\1\40\3\0\13\40\2\0\1\40\4\0"+
    "\7\40\1\0\1\40\7\0\6\40\1\0\2\40\4\0"+
    "\1\42\66\0\1\44\3\0\13\44\2\0\1\44\4\0"+
    "\7\44\1\0\1\44\7\0\6\44\1\0\2\44\4\0"+
    "\1\44\1\0\1\44\3\0\13\44\2\0\1\44\4\0"+
    "\7\44\1\0\1\44\7\0\6\44\1\0\2\44\4\0"+
    "\1\44\1\0\1\44\3\0\13\44\2\0\1\44\4\0"+
    "\1\132\6\44\1\0\1\44\7\0\6\44\1\0\2\44"+
    "\4\0\1\44\1\0\1\44\3\0\13\44\2\0\1\44"+
    "\4\0\2\44\1\133\4\44\1\0\1\44\7\0\6\44"+
    "\1\0\2\44\4\0\1\44\1\0\1\44\3\0\13\44"+
    "\2\0\1\44\4\0\1\44\1\134\5\44\1\0\1\44"+
    "\7\0\6\44\1\0\2\44\1\0\31\135\1\136\33\135"+
    "\32\137\1\136\32\137\1\0\1\56\72\0\1\140\65\0"+
    "\1\141\66\0\1\142\67\0\1\143\67\0\1\144\5\0"+
    "\1\145\47\0\1\146\14\0\1\147\57\0\1\150\100\0"+
    "\1\151\64\0\1\152\73\0\1\153\20\0\1\71\1\154"+
    "\4\71\1\73\1\74\41\71\1\75\13\71\1\154\1\72"+
    "\4\154\1\155\1\156\55\154\1\71\1\154\4\71\1\73"+
    "\1\157\41\71\1\75\14\71\1\154\4\71\1\73\1\74"+
    "\1\160\40\71\1\75\13\71\1\75\1\154\4\75\1\161"+
    "\1\162\55\75\24\0\1\163\43\0\1\44\1\0\1\44"+
    "\3\0\1\44\1\164\11\44\2\0\1\44\4\0\7\44"+
    "\1\0\1\44\7\0\6\44\1\0\2\44\30\0\1\165"+
    "\65\0\1\165\41\0\1\103\3\0\13\103\2\0\1\103"+
    "\4\0\12\103\1\0\1\103\4\0\6\103\1\0\2\103"+
    "\3\0\1\166\1\167\1\0\1\170\3\0\13\170\1\171"+
    "\1\0\1\170\4\0\7\170\1\0\1\170\2\0\1\172"+
    "\1\173\3\0\6\170\1\0\2\170\3\0\1\166\1\167"+
    "\1\0\1\170\3\0\11\170\1\174\1\170\1\171\1\0"+
    "\1\170\4\0\7\170\1\0\1\170\2\0\1\172\1\173"+
    "\3\0\6\170\1\0\2\170\6\0\1\172\3\0\13\172"+
    "\2\0\1\172\4\0\7\172\1\0\1\172\2\0\1\172"+
    "\1\173\3\0\6\172\1\0\2\172\20\0\1\175\67\0"+
    "\1\176\77\0\1\177\27\0\31\114\2\0\12\114\1\0"+
    "\17\114\2\0\1\166\1\167\1\0\1\167\3\0\13\167"+
    "\1\171\1\0\1\167\4\0\7\167\1\0\1\167\7\0"+
    "\6\167\1\0\2\167\34\0\1\200\66\0\1\201\63\0"+
    "\1\202\30\0\44\20\1\203\20\20\3\0\1\127\1\0"+
    "\1\127\3\0\13\127\2\0\1\127\4\0\7\127\1\0"+
    "\1\127\7\0\6\127\1\0\2\127\4\0\1\127\1\0"+
    "\1\127\3\0\6\127\1\204\4\127\2\0\1\127\4\0"+
    "\7\127\1\0\1\127\7\0\6\127\1\0\2\127\4\0"+
    "\1\44\1\0\1\44\3\0\13\44\2\0\1\44\4\0"+
    "\1\44\1\205\5\44\1\0\1\44\7\0\6\44\1\0"+
    "\2\44\4\0\1\44\1\0\1\44\3\0\1\206\12\44"+
    "\2\0\1\44\4\0\7\44\1\0\1\44\7\0\6\44"+
    "\1\0\2\44\4\0\1\44\1\0\1\44\3\0\1\207"+
    "\12\44\2\0\1\44\4\0\7\44\1\0\1\44\7\0"+
    "\6\44\1\0\2\44\17\0\1\210\25\0\1\211\32\0"+
    "\1\212\70\0\1\213\106\0\1\214\46\0\1\215\103\0"+
    "\1\216\66\0\1\217\43\0\1\220\102\0\1\221\33\0"+
    "\1\222\55\0\6\154\1\155\1\156\63\154\1\155\1\223"+
    "\63\154\1\155\1\156\1\224\54\154\1\225\1\0\4\225"+
    "\1\226\1\227\1\160\40\225\1\230\13\225\1\231\1\0"+
    "\47\231\1\0\13\231\1\75\1\154\4\75\1\161\1\232"+
    "\56\75\1\154\4\75\1\161\1\162\1\224\54\75\3\0"+
    "\1\44\1\0\1\44\3\0\5\44\1\233\5\44\2\0"+
    "\1\44\4\0\7\44\1\0\1\44\7\0\6\44\1\0"+
    "\2\44\3\0\1\166\21\0\1\171\42\0\1\171\67\0"+
    "\1\234\3\0\13\234\2\0\1\234\4\0\7\234\1\0"+
    "\1\234\2\0\1\234\4\0\6\234\1\0\2\234\22\0"+
    "\1\235\65\0\1\236\116\0\1\237\44\0\1\240\41\0"+
    "\1\241\64\0\1\242\53\0\7\20\1\243\34\20\1\203"+
    "\20\20\3\0\1\127\1\0\1\127\3\0\10\127\1\244"+
    "\2\127\2\0\1\127\4\0\7\127\1\0\1\127\7\0"+
    "\6\127\1\0\2\127\4\0\1\44\1\0\1\44\3\0"+
    "\10\44\1\245\2\44\2\0\1\44\4\0\7\44\1\0"+
    "\1\44\7\0\6\44\1\0\2\44\4\0\1\44\1\0"+
    "\1\44\3\0\11\44\1\205\1\44\2\0\1\44\4\0"+
    "\7\44\1\0\1\44\7\0\6\44\1\0\2\44\4\0"+
    "\1\44\1\0\1\44\3\0\1\245\12\44\2\0\1\44"+
    "\4\0\7\44\1\0\1\44\7\0\6\44\1\0\2\44"+
    "\45\0\1\246\33\0\1\247\70\0\1\247\56\0\1\250"+
    "\74\0\1\251\66\0\1\252\75\0\1\253\51\0\1\254"+
    "\62\0\1\255\55\0\1\256\64\0\1\224\54\0\1\225"+
    "\1\0\4\225\1\226\1\227\41\225\1\230\14\225\1\0"+
    "\4\225\1\226\1\257\41\225\1\230\14\225\1\0\4\225"+
    "\1\226\1\227\1\231\40\225\1\230\13\225\1\230\1\0"+
    "\4\230\1\260\1\261\56\230\1\0\4\230\1\260\1\261"+
    "\1\224\54\230\55\0\1\262\44\0\1\263\50\0\1\264"+
    "\65\0\1\240\53\0\1\264\53\0\10\20\1\265\33\20"+
    "\1\122\20\20\3\0\1\127\1\0\1\127\3\0\13\127"+
    "\2\0\1\127\4\0\7\127\1\0\1\127\7\0\2\127"+
    "\1\266\3\127\1\0\2\127\35\0\1\267\53\0\1\270"+
    "\52\0\1\271\2\0\1\272\1\273\22\0\1\274\41\0"+
    "\1\275\72\0\1\276\62\0\1\277\43\0\1\230\1\0"+
    "\4\230\1\260\1\300\56\230\1\0\4\230\1\260\1\261"+
    "\1\0\54\230\21\0\1\301\65\0\1\302\45\0\1\127"+
    "\1\0\1\127\3\0\10\127\1\303\2\127\2\0\1\127"+
    "\4\0\7\127\1\0\1\127\7\0\6\127\1\0\2\127"+
    "\42\0\1\304\40\0\1\305\61\0\1\306\67\0\1\307"+
    "\67\0\1\310\101\0\1\311\62\0\1\312\47\0\1\313"+
    "\107\0\1\314\64\0\1\315\63\0\1\316\27\0\1\127"+
    "\1\0\1\127\3\0\13\127\2\0\1\127\4\0\7\127"+
    "\1\0\1\127\7\0\6\127\1\0\1\127\1\317\22\0"+
    "\1\320\63\0\1\321\56\0\1\322\70\0\1\323\106\0"+
    "\1\324\45\0\1\325\100\0\1\326\105\0\1\327\1\0"+
    "\1\330\37\0\1\331\34\0\1\127\1\0\1\127\3\0"+
    "\4\127\1\332\6\127\2\0\1\127\4\0\7\127\1\0"+
    "\1\127\7\0\6\127\1\0\2\127\14\0\1\310\70\0"+
    "\1\310\64\0\1\333\104\0\1\334\104\0\1\335\42\0"+
    "\1\336\44\0\1\337\52\0\1\127\1\0\1\127\3\0"+
    "\13\127\2\0\1\127\4\0\1\340\6\127\1\0\1\127"+
    "\7\0\6\127\1\0\2\127\22\0\1\341\122\0\1\342"+
    "\61\0\1\343\23\0\1\344\112\0\1\310\60\0\1\345"+
    "\45\0\1\346\70\0\1\347\102\0\1\350\57\0\1\351"+
    "\46\0\1\352\62\0\1\353\67\0\1\354\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9699];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\6\1\1\11\4\1\4\11\13\1\4\11\17\1"+
    "\1\0\15\1\1\11\4\1\1\11\2\1\3\0\1\11"+
    "\2\1\1\11\3\1\1\0\1\11\1\0\1\1\1\11"+
    "\2\0\1\11\12\0\2\1\2\0\1\11\1\1\1\11"+
    "\3\0\1\1\2\0\1\1\6\0\5\1\1\11\13\0"+
    "\1\11\3\1\1\0\4\1\1\0\1\11\4\0\3\1"+
    "\2\11\1\0\1\1\4\0\1\11\1\1\4\0\2\11"+
    "\1\1\11\0\1\1\2\0\1\1\4\0\1\11\3\0"+
    "\1\11\2\0\1\1\2\11\3\0\1\11\4\0\1\1"+
    "\1\0\1\11\3\0\1\1\1\0\1\11\3\0\1\11"+
    "\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _SilverstripeLexer() {
        this((java.io.Reader)null);
    }

    private void resetAll() {
    }
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopstate() {
        yybegin(stack.pop());
    }

    public void yycleanstates() {
        while(!stack.isEmpty()) {
            yybegin(stack.pop());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SilverstripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return SilverstripeTokenTypes.SS_COMMENT;
            } 
            // fall through
          case 55: break;
          case 2: 
            { // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 56: break;
          case 3: 
            { // Backtrack over the {$ characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("$")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")
    )) {
        yypushback(1);
    }

    yypushstate(SS_LOOKUP);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 5: 
            { yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 59: break;
          case 6: 
            { yypushstate(SS_LOOKUP_STEP); return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 60: break;
          case 7: 
            { return SilverstripeTokenTypes.SS_LEFT_BRACE;
            } 
            // fall through
          case 61: break;
          case 8: 
            { yypushstate(SS_LOOKUP_ARGUMENTS); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 62: break;
          case 9: 
            { yypopstate(); return SilverstripeTokenTypes.SS_RIGHT_BRACE;
            } 
            // fall through
          case 63: break;
          case 10: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 11: 
            { yypopstate(); return SilverstripeTokenTypes.SS_IDENTIFIER;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return SilverstripeTokenTypes.SS_NUMBER;
            } 
            // fall through
          case 66: break;
          case 13: 
            { yypushstate(SS_LOOKUP); return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 67: break;
          case 14: 
            { yypopstate(); return SilverstripeTokenTypes.SS_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 68: break;
          case 15: 
            { return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 69: break;
          case 16: 
            { return SilverstripeTokenTypes.SS_COMMA;
            } 
            // fall through
          case 70: break;
          case 17: 
            { yypushback(yylength()); yypushstate(SS_BAD_BLOCK_STATEMENT);
            } 
            // fall through
          case 71: break;
          case 18: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return SilverstripeTokenTypes.SS_COMPARISON_OPERATOR;
            } 
            // fall through
          case 73: break;
          case 20: 
            { yypushstate(SS_INCLUDE_VARS); return SilverstripeTokenTypes.SS_INCLUDE_FILE;
            } 
            // fall through
          case 74: break;
          case 21: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_KEYWORD;
            } 
            // fall through
          case 75: break;
          case 22: 
            { yypushstate(SS_REQUIRE_CONTENT); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 76: break;
          case 23: 
            { return SilverstripeTokenTypes.SS_STRING;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return SilverstripeTokenTypes.SS_EQUALS;
            } 
            // fall through
          case 78: break;
          case 25: 
            { // Backtrack over the <% characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
    )) {
        yypushback(1);
    }

    yypushstate(SS_BLOCK_START);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 79: break;
          case 26: 
            { return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 80: break;
          case 27: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 81: break;
          case 28: 
            { return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 82: break;
          case 29: 
            { yypopstate(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 83: break;
          case 30: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_IF_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 31: 
            { // Backtrack until we've passed back over the <% characters of the new block
        while (yylength() > 0 && (
            yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
            || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
        )) {
            yypushback(1);
        }

        yycleanstates(); // Reset state to resume lexing
        return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 85: break;
          case 32: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BAD_BLOCK_STATEMENT;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return SilverstripeTokenTypes.SS_AND_OR_OPERATOR;
            } 
            // fall through
          case 87: break;
          case 34: 
            { yypushback(1); yypushstate(SS_NAMED_VAR); return SilverstripeTokenTypes.SS_NAMED_ARGUMENT_NAME;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return SilverstripeTokenTypes.SS_IS_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 36: 
            { yypushstate(SS_TRANSLATION_STATEMENT); yypushback(1); return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 90: break;
          case 37: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_IDENTIFIER;
            } 
            // fall through
          case 91: break;
          case 38: 
            { return SilverstripeTokenTypes.SS_REQUIRE_CSS;
            } 
            // fall through
          case 92: break;
          case 39: 
            { return SilverstripeTokenTypes.SS_PRIMITIVE;
            } 
            // fall through
          case 93: break;
          case 40: 
            { yypushstate(SS_COMMENT); return SilverstripeTokenTypes.SS_COMMENT_START;
            } 
            // fall through
          case 94: break;
          case 41: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_START_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 42: 
            { return SilverstripeTokenTypes.SS_ELSE_KEYWORD;
            } 
            // fall through
          case 96: break;
          case 43: 
            { yypopstate(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 97: break;
          case 44: 
            { yypopstate(); yypushback(4); return SilverstripeTokenTypes.SS_COMMENT;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return SilverstripeTokenTypes.SS_END_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 46: 
            { yypushstate(SS_CACHED_STATEMENT); return SilverstripeTokenTypes.SS_CACHED_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 47: 
            { yypushstate(SS_INCLUDE_STATEMENT); return SilverstripeTokenTypes.SS_INCLUDE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 48: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_ELSE_IF_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 49: 
            { yypushstate(SS_REQUIRE_STATEMENT); return SilverstripeTokenTypes.SS_REQUIRE_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 50: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_SIMPLE_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 51: 
            { return SilverstripeTokenTypes.SS_THEME_DIR;
            } 
            // fall through
          case 105: break;
          case 52: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_CSS;
            } 
            // fall through
          case 106: break;
          case 53: 
            { return SilverstripeTokenTypes.SS_REQUIRE_JS;
            } 
            // fall through
          case 107: break;
          case 54: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_JS;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
